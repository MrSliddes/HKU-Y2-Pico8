pico-8 cartridge // http://www.pico-8.com
version 32
__lua__
--sea of stealers
--by tymon & ischa

--Game
---globals
map_x = 0
map_y = 0
game_state = 0
level = 0
lives = 3
score = 10
has_started_level = false
bullets_player = {}
bullets_enemies = {}
enemies = {}
fps = 30

---init
function _init()
end

---update
function _update()
  update_player()
  for i, b in pairs(bullets_player) do update_bullet(b, bullets_player) end
  for i, b in pairs(bullets_enemies) do update_bullet(b, bullets_enemies) end
  foreach(enemies, update_enemy)
  
  if game_state == 0 then
    --main menu
    if btnp(5) then
      game_state = 1
      new_level(1)
    end
    
  elseif game_state >= 1 then
    --game
    update_level()
    check_hit_bullets(0)
    check_hit_bullets(1)
  end
end



---draw
function _draw()
  cls()
  map(map_x,map_y,0,0,16,16)
  draw_player()
  if game_state == 0 then
    --main
    rectfill(32, 32, 103, 48, 5)
    print('sea of ships', 33, 33, 7)
    print('by tymon & ischa', 33, 41, 7)
  elseif game_state == 1 then
    --game
  end
  draw_game_ui()
  foreach(bullets_player, draw_bullet)
  foreach(bullets_enemies, draw_bullet)
  foreach(enemies, draw_enemy)
end

function draw_game_ui()
  rectfill(0, 0, 128, 8, 0)
  print('lvl: '..level, 1, 2, 7)
  local s = '0000'
  if score > 999 then s = score
  elseif score > 99 then s = '0'..score
  elseif score > 9 then s = '00'..score
  else s = '000'..score end
  print('score: '..s, 84, 2, 7)
  rectfill(0, 120, 128, 128, 0)
  if lives > 0 then spr(3, 1, 120) end
  if lives > 1 then spr(3, 9, 120) end
  if lives > 2 then spr(3, 17, 120) end
  local bcount = 4 - table_length(bullets_player)
  if bcount > 0 then spr(2, 120, 120) end
  if bcount > 1 then spr(2, 112, 120) end
  if bcount > 2 then spr(2, 104, 120) end
  if bcount > 3 then spr(2, 96, 120) end
end

---functions (mostly abc sorted)

--terrible code to check bullet collision
function check_hit_bullets(index)
  local todelete = {}
  if index == 0 then --check playerbullet hit enemy
    for i, b in pairs(bullets_player) do
      --foreach player bullet check foreach enemy if grid tile is same
      for j, e in pairs(enemies) do
        if flr(b.x/8) == flr(e.x/8) and flr(b.y/8) == flr(e.y/8) then
          --delete enemy and bullet cause collision
          local d = {b=b, e=e}
          add(todelete,d)
          score+=1
        end
      end
    end
    for i, d in pairs(todelete) do
      del(bullets_player, d.b.table_index)
      del(enemies, d.e.table_index)
    end
  elseif index == 1 then --check enemybullet hit player
    
  end
  
  score +=1
end

--table, xpos, ypos, xdir, ydir, live timer
function create_bullet(x, y, angle, alivet, speed, table)
  local b = {
  x = x,
  y = y,
  dx = x - x + cos(angle) * speed,
  dy = y - y + sin(angle) * speed,
  alive = alivet,
  table_index = table_length(bullets) + 1
  }
  b.x += b.dx * 2
  b.y += b.dy * 2
  add(table, b)
  sfx(0)
end

--xpos,ypos,dirx,diry,lengthroute,diffeculty
function create_enemy(x,y,dx,dy,length,diff)
  local shoot_time = 10
  local spra = {0,1,2,3}
  local hp = 1
  local spd = 1
  local attack_distance = 40
  local bullet_speed = 1.5
  if diff == 0 then
    shoot_time = 2 * fps
    spra = {128,129,130,131}
    hp = 1
    spd = 1
    attack_distance = 6 * 8
  end
  
  local e = {
  x = x,
  y = y,
  x1 = x,
  y1 = y,
  x2 = x + (dx * length),
  y2 = y + (dy * length),
  dx = dx * spd,
  dy = dy * spd,
  diff = diff,
  shoot_time = shoot_time,
  shoot_timer = shoot_time,
  sprite_index = spra[1],
  spra = spra,
  hp = hp,
  spd = spd,
  attack_distance = attack_distance,
  bullet_speed = bullet_speed,
  table_index = table_length(enemies) + 1
  }
  add(enemies, e)
end

-- gives distance between 2 points
function distance(x1,y1,x2,y2)
  local a = x2 - x1
  local b = y2 - y1
  return sqrt(a^2+b^2)
end

function draw_bullet(b)
  spr(2, b.x, b.y)
end

function draw_enemy(e)
  if e.dx > 0 then e.sprite_index = e.spra[4]
  elseif e.dx < 0 then e.sprite_index = e.spra[3]
  elseif e.dy > 0 then e.sprite_index = e.spra[2]
  elseif e.dy < 0 then e.sprite_index = e.spra[1] end
  
  spr(e.sprite_index, e.x, e.y)
end

function new_level(index)
  level = index
  has_started_level = false
end

--table to remove it from, bullet
function remove_bullet(table, b)
  del(table, table[b.table_index])
  for i, x in pairs(table) do
    x.table_index = i
  end
end

--table to remove it from, enemy
function remove_enemy(table, e)
  del(table, table[e.table_index])
  for i, x in pairs(table) do
    x.table_index = i
  end
end

function table_length(t)
  local count = 0
  for _ in pairs(t) do count = count + 1 end
  return count
end

function update_bullet(b, table)
  --bounce x
  if not solid_area(b.x + b.dx, b.y, 8, 8, 1) then
    b.x += b.dx
  else
    b.dx *= -1
    sfx(1)
  end
  --bounce y
  if not solid_area(b.x, b.y + b.dy, 8, 8, 1) then
    b.y += b.dy
  else
    b.dy *= -1
    sfx(1)
  end
  --remove bullet
  b.alive -= 1
  if b.alive <= 0 then
    remove_bullet(table, b)
  end
  return b
end

function update_enemy(e)
  --check line dir
  if not e.dx == 0 then
    --x axis
    if e.dx < 0 and e.x < e.x1 then
     e.dx = e.spd
    elseif e.dx > 0 and e.x > e.x2 then
      e.dx = -e.spd
    end
  else
    --y axis
    if e.dy < 0 and e.y < e.y1 then
      e.dy = e.spd
      elseif e.dy > 0 and e.y > e.y2 then
      e.dy = -e.spd
    end
  end
  --updatepos
  e.x += e.dx
  e.y += e.dy
  --shooting
  if e.shoot_timer > 0 then
    e.shoot_timer -= 1
  else
    if distance(p1x,p1y,e.x,e.y) <= e.attack_distance then
      local angle = atan2(p1x - e.x, p1y - e.y)
      create_bullet(e.x, e.y, angle, 30 * 4, e.bullet_speed, bullets_enemies)
      e.shoot_timer = e.shoot_time
    end
  end
end

function update_level()
  -- level init
  if not has_started_level then
    has_started_level = true
    if(level == 1) then
      map_x=16
      map_y=0
      p1x = 24
      p1y = 80
      create_enemy(96, 48, 0, 1, 40, 0)
    end
  end
  
  --level update
end

--- other functions

--collision detection, spd cannot be higer than 1!
--xpos,ypos,width (8pixels = 7),height,flag index
function hit(x,y,w,h,f)
  collide=false
  for i=x,x+w,w do
    if fget(mget(i/8+map_x,y/8+map_y))==f or
    fget(mget(i/8+map_x,(y+h)/8+map_y))==f
      then collide=true
    end
  end
  return collide
end

function solid(x, y)
 return fget(mget(x/8+map_x, y/8+map_y)) == 1
end

function solid_area(x,y,w,h,d)
  x = x + (w / 2)
  y = y + (h / 2)
  return 
  solid(x-d,y-d) or
  solid(x+d,y-d) or
  solid(x-d,y+d) or
  solid(x+d,y+d)
end

-- sprite rotation by @fsouchu
-- rotate a sprite
-- col 0 is transparent
-- sx,sy - sprite sheet coords
-- x,y - screen coords
-- a - angle
-- w - width in tiles
function rspr(sx,sy,x,y,a,w)
    local ca,sa=cos(a),sin(a)
    local srcx,srcy
    local ddx0,ddy0=ca,sa
    local mask=shl(0xfff8,(w-1))
    w*=4
    ca*=w-0.5
    sa*=w-0.5
    local dx0,dy0=sa-ca+w,-ca-sa+w
    w=2*w-1
    for ix=0,w do
        srcx,srcy=dx0,dy0
        for iy=0,w do
            if band(bor(srcx,srcy),mask)==0 then
                local c=sget(sx+srcx,sy+srcy)
                                -- set transparent color here
                if (c!=0) pset(x+ix,y+iy,c)
            end
            srcx-=ddy0
            srcy+=ddx0
        end
        dx0+=ddx0
        dy0+=ddy0
    end
end



---player, credit to elastiskalinjen for dir based movement
p1angle=0
p1anglespd = 0.02
p1speed=0.5
p1acc=0
p1x=16
p1y=24
p1dx=0
p1dy=0
p1_max_bullets = 4

function update_player()
  --movement
  if btn(0) then
    p1angle+=p1anglespd
  end
  if btn(1) then
    p1angle-=p1anglespd
  end
  -- p1angle=p1angle%360
  if btn(2) then
    p1acc += p1speed
  end
  if btn(3) then
    p1acc -= p1speed
  end
  --move in angle dir
  local dx = cos(p1angle) * p1acc
  local dy = sin(p1angle) * p1acc
  -- collision check
  if hit(p1x+dx,p1y,7,7,1) then
    dx=0
  end
  if hit(p1x,p1y+dy,7,7,1) then
    dy=0
  end
  p1x+=dx
  p1y+=dy
  p1acc*=0.6
 
  --shooting
  if btnp(5) and level > 0 and table_length(bullets_player)+1 <= p1_max_bullets then
    create_bullet(p1x, p1y, p1angle, 30 * 4, 1.5, bullets_player)
  end
end

function draw_player()
--  spr(1, xpos, ypos)
  rspr(8,0, p1x, p1y,-p1angle, 1, 1)
  color(7)
--print(p1angle)
--print(p1x)
--print(p1y)  
end

__gfx__
00000000000700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000044470000005500008808800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
007007004f4674000055750087788880000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000ff4576440555575087888880000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000770004f4674000555555008888800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700044470000055550000888000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000700000005500000080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
cc515555cc5655cc515555cccc5555ccffffffffffffffffffffffff000000000000000000000000000000000000000000000000000000000000000000000000
c5556655c556566c5566655cc555655cffffffffffffffffffffffff000000000000000000000000000000000000000000000000000000000000000000000000
55556565556656155565655555655555ffffffffffffffffffffffff000000000000000000000000000000000000000000000000000000000000000000000000
55565555665566516665551515565665ffffffffffffffffffffffff000000000000000000000000000000000000000000000000000000000000000000000000
56566655566565555556555116656555ffffffffffffffffffffffff000000000000000000000000000000000000000000000000000000000000000000000000
16665565156565555565555555655155fffffff6f66f66f666ffffff000000000000000000000000000000000000000000000000000000000000000000000000
515655555656565155566661c555555cffffff6666565565166fffff000000000000000000000000000000000000000000000000000000000000000000000000
155655161556556555565555cc5515ccfffff615555551511566ffff000000000000000000000000000000000000000000000000000000000000000000000000
cc5156555555655155c115cc51c15515fffff666cccccccc566fffff000000000000000000000000000000000000000000000000000000000000000000000000
c5555655515565555566555c55156555ffff6655cccccccc165fffff000000000000000000000000000000000000000000000000000000000000000000000000
55666555665655655556556555565555fffff661cccccccc65ffffff000000000000000000000000000000000000000000000000000000000000000000000000
56656656556666665565566655566555fffff566cccccccc66ffffff000000000000000000000000000000000000000000000000000000000000000000000000
65555566555655656656655566655655fffff666cccccccc56ffffff000000000000000000000000000000000000000000000000000000000000000000000000
15555655565655556555665555655566fffff656cccccccc1566ffff000000000000000000000000000000000000000000000000000000000000000000000000
c1556555556665555556555c56555555ffff6655cccccccc6665ffff000000000000000000000000000000000000000000000000000000000000000000000000
cc56155515565615c16655cc551551c5ffff5661cccccccc665fffff000000000000000000000000000000000000000000000000000000000000000000000000
51556655655565555655655156656555ffffff166666666616ffffff000000000000000000000000000000000000000000000000000000000000000000000000
555665556655655655566555c5566551fffffff5656655f565ffffff000000000000000000000000000000000000000000000000000000000000000000000000
15665555156666615556511555556555fffffff55f555ff56fffffff000000000000000000000000000000000000000000000000000000000000000000000000
55656555565565515655651551555655fffffffffff5ffffffffffff000000000000000000000000000000000000000000000000000000000000000000000000
56556655556565556665565555556566ffffffffffffffffffffffff000000000000000000000000000000000000000000000000000000000000000000000000
55555566555556655556655555656555ffffffffffffffffffffffff000000000000000000000000000000000000000000000000000000000000000000000000
c5555655c555655c5156555c15565551ffffffffffffffffffffffff000000000000000000000000000000000000000000000000000000000000000000000000
cc551615cc6661cc551655cc55565555ffffffffffffffffffffffff000000000000000000000000000000000000000000000000000000000000000000000000
00000000ccccccccffffffff0000400000000000000000000000000000000000cccc111ccccc111c000000000000000000000000000000000000000000000000
00000000ccccccccffffffff0000400000000000000000000000000000000000cc111111cc111111000000000000000000000000000000000000000000000000
00700700ccccccccffffffff0004640000000000000000000000000000000000c1211111c1811111000000000000000000000000000000000000000000000000
00077000ccccccccffffffff0077777000000000000000000000000000000000c1111111c1111111000000000000000000000000000000000000000000000000
00077000ccccccccffffffff0746564700000000000000000000000000000000c1168861c1162261000000000000000000000000000000000000000000000000
00700700ccccccccffffffff0044444000000000000000000000000000000000c1888888c1222222000000000000000000000000000000000000000000000000
00000000ccccccccffffffff004fff4000000000000000000000000000000000c111111171111111000000000000000000000000000000000000000000000000
00000000ccccccccffffffff0004f400000000000000000000000000000000001111111177111117000000000000000000000000000000000000000000000000
cccccccccccfffcccccccccccccc8ccccccc2cccffffffffffffffffffffffffffffffffffffffffffffffff00000000cc5565cccccccccccccccccccccccccc
cccccccfffffffffffcccccccccc8ccccccc2cccfffffffffffffffffffffffffffffffff66f66f6ffffffff00000000cc5565ccccccccccccccccccccc56ccc
cccccffffffffffffffcccccccc868ccccc262ccfffffffffffffffffffffffffffff66666565565ffffffff00000000cc5665cc565cccccccccc555cc5565cc
ccccfffffffffffffffffccccc22222ccc77777cffffffffffffffffffffffffffff6565555551515666ffff00000000565665cc56555cccccc56666cc5651cc
cccff33bffffffffffffffccc2865682c7265627fffffffffffffffffffffffffff6555cccccccccc5556fff00000000556651cc666655cccc565665cc5665cc
ccff39ffffffffffffffffcccc88888ccc22222cfffffff6f66f66f666ffffffff6651cccccccccccc1556ff0000000065511ccc615565cccc566515cc5566cc
cfffbf4ffffffffffffffffccc8fff8ccc2fff2cffffff6666565565166fffffff651cccccccccccccc166ff00000000515ccccccc5566cccc5565cccc5565cc
cfffff4ffffffffffffffffcccc8f8ccccc2f2ccfffff615555551511566fffff655cccccccccccccccc56ff00000000cccccccccc5665cccc5666cccc1561cc
ccfffffffffffffffffffffcfffffffffffffffffffff666cccccccc566ffffff666cccccccccccccccc566f00000000cccccccccccccccccccccccccc5655cc
cffffffffffffffffffffffcffffffffffffffffffff6655cccccccc165fffff6655cccccccccccccccc165f00000000cccccccccccccccccccccccccc5665cc
ccfffffffffffffffffffffffffb3ffffff33bfffffff661cccccccc65fffffff661cccccccccccccccc65ff00000000cc5655655516555c555655cccc5565cc
cfffffffffffffffffffffffffff9bffff39fffffffff566cccccccc66fffffff566cccccccccccccccc66ff00000000c5666666565666655656665cccc651cc
fffffffffffffffffffffffffff9ffffffbf4ffffffff666cccccccc56fffffff666cccccccccccccccc56ff00000000c5555565556655665566556ccc5665cc
cffffffffffffffffffffffcfff4ffffffff4ffffffff656cccccccc1566fffff656cccccccccccccccc156f00000000c151155565551555615511ccccc566cc
cffffffffffffffffffffffcffffffffffffbfffffff6655cccccccc6665ffff6655cccccccccccccccc666f00000000cccccccccccccccc1ccccccccc5565cc
ccfffffffffffffffffffffcffffffffffffffffffff5661cccccccc665fffff5661cccccccccccccccc666f00000000cccccccccccccccccccccccccc5561cc
cffffffffffffffffffffffcffffffffcccffcccffffff166666666616fffffff666cccccccccccccccc655fcc6665cccccccccccc5565cc00000000cc6665cc
ccfffffffffffffffb3fffccffffffffccffffccfffffff5656655f565fffffff5566cccccccccccccc66fffcc1665cccccccccccc5565cc00000000cc1665cc
cccfffffffffffffff9bfcccffffffffcff3bffcfffffff55f555ff56fffffffff6666cccccccccccc666fffcc5565cc55c6c5c55556655600000000cc5565cc
cccffffffffffffff9fffcccfff9a9ffff39fffffffffffffff5ffffffffffffff55666cccccccccc6655fffc656556c566666665666666500000000cc5651cc
cccccffffffffffff4ffccccfff444ffffbf4fffffffffffffffffffffffffffffff5566666666666655ffff66555666656655555566556600000000cc566ccc
cccccffffffffffffffcccccffffffffcfff4ffcffffffffffffffffffffffffffffff56656655f5555fffff655555f51155651161c5615100000000ccc566cc
cccccccffffffffffcccccccffffffffccffffccffffffffffffffffffffffffffffff565f555ff55fffffff5f555ff5ccc566cccccccccc00000000ccc16ccc
cccccccccccfffccccccccccffffffffcccfccccfffffffffffffffffffffffffffffff5fff5fffffffffffffff5ffffccc561cccccccccc00000000cccccccc
00030000003f30000000700000070000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0003000003fff3000007333003337000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0036300003333300003763f33f367300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0777770073656370336753ffff357633000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
7365637007777700003763f33f367300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
03333300003630000007333003337000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
03fff300000300000000700000070000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
003f3000000300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__gff__
0000000001000000000000000000000001010100010101000000000000000000010101010100010000000000000000000101010101010100000000000000000000000000020202000000000000000000000000000001010100000000000000000000000000010001000000000000000000000000000101010000000000000000
0000000000020202000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1415151515151515151515151515151614151515151515151515151515151516141515151515151515151515151515161415151515151515151515151515151614151515151515151515151515151516141515151515151515151515151515161415151515151515151515151515151614151515151515151515151515151516
6525252525252525252525252525256765252525252525252525252525252567652525252525252525252525252525676525252525252525252525252525256765252525252525252525252525252567652525252525252525252525252525676525252525252525252525252525256765252525252525252525252525252567
6525252525102323232323122525256765252525252525252525252525252567652525252525252525252525252525676525252525252525252525252525256765252525252525252525252525252567652525252525252525252525252525676525252525252525252525252525256765252525252525252525252525252567
6525252510212121212121211225256765252525252525252525252525252567652525252525252525252525252525676525252525252525252525252525256765252525252525252525252525252567652525252525252525252525252525676525252525252525252525252525256765252525252525252525252525252567
6525252533212121212121213325256765252525252525251125252525252567652525252525252525252525252525676525252525252525252525252525256765252525252525252525252525252567652525252525252525252525252525676525252525252525252525252525256765252525252525252525252525252567
6525251021212525332525212112256765252525252525253325252525252567652525252525252525252525252525676525252525252525252525252525256765252525252525252525252525252567652525252525252525252525252525676525252525252525252525252525256765252525252525252525252525252567
6525253321252525332525252133256765252525252525253325252525252567652525252525252525252525252525676525252525252525252525252525256765252525252525252525252525252567652525252525252525252525252525676525252525252525252525252525256765252525252525252525252525252567
6525253021252521212125252132256765252525252525253325252566662567652525252525252525252525666625676525252525252525252525256666256765252525252525252525252566662567652525252525252525252525666625676525252525252525252525256666256765252525252525252525252566662567
6525252533212121232121212166256765252525252525253325256666662567652525252525252525252566666625676525252525252525252525666666256765252525252525252525256666662567652525252525252525252566666625676525252525252525252525666666256765252525252525252525256666662567
6525252530232121252121233225256765252525252525253366256666252567652525252525252525662566662525676525252525252525256625666625256765252525252525252566256666252567652525252525252525662566662525676525252525252525256625666625256765252525252525252566256666252567
6525252525252123212321662525256765252525252525253366666625252567652525252525252525666666252525676525252525252525256666662525256765252525252525252566666625252567652525252525252525666666252525676525252525252525256666662525256765252525252525252566666625252567
6525252525253125312531252525256765252525252525663166662525252567652525252525256666666625252525676525252525252566666666252525256765252525252525666666662525252567652525252525256666666625252525676525252525252566666666252525256765252525252525666666662525252567
6525252525252525252525252525256765252525252525252525252525252567652525252525252525252525252525676525252525252525252525252525256765252525252525252525252525252567652525252525252525252525252525676525252525252525252525252525256765252525252525252525252525252567
3435353535353535353535353535353634353535353535353535353535353536343535353535353535353535353535363435353535353535353535353535353634353535353535353535353535353536343535353535353535353535353535363435353535353535353535353535353634353535353535353535353535353536
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1415151515151515151515151515151600141515151515151515151515151515160000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
6525252525252525252525252525256700652525252525252525252525252525670000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
6525252525252525252525252525256700652525252525252525252525252525670000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
6525252525252525252525252525256700652525252525252525252525252525670000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
6525252525252525252525252525256700652525252525252525252525252525670000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
6525252525252525252525252525256700652525252525252525252525252525670000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
6525252525252525252525252525256700652525252525252525252525252525670000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
6525252525252525252525256666256700652525252525252525252525666625670000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
6525252525252525252525666666256700652525252525252525252566666625670000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
6525252525252525256625666625256700652525252525252525662566662525670000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
6525252525252525256666662525256700652525252525252525666666252525670000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
6525252525252566666666252525256700652525252525256666666625252525670000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
6525252525252525252525252525256700652525252525252525252525252525670000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3435353535353535353535353535353600343535353535353535353535353535360000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__sfx__
0002000019020160201402012020100200f0200f0200f0201800016000150001200011000100000e0000d0000d0000c0000b00002000020000100000000000000000000000010000000000000000000000000000
0002000014720177201e720197200f7200d7200d72000700007000070000700007000070000700007000070000700007000070000700007000070000700007000070000700007000070000700007000070000700
