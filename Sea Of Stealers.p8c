<?xml version="1.0" encoding="utf-8"?>
<project version="1">
  <game>
    <name>Sea Of Ships</name>
    <author>Tymon &amp; Ischa</author>
    <cart>C:\Users\Mr_Sl\AppData\Roaming\pico-8\carts\sos.p8</cart>
  </game>
  <entities>
    <entity name="Notes" enabled="0">
      <function name="ideas" enabled="0">ideas

  1. 
  2. </function>
      <function name="todo" enabled="0">todo

  1. all tile walls are the wrong tile
  2. </function>
    </entity>
    <entity name="Game" enabled="1">
      <function name="globals" enabled="1">---globals
map_x = 0
map_y = 0
game_state = 0
level = 1
lives = 3
score = 0
has_started_level = false
bullets_player = {}
bullets_enemies = {}
enemies = {}
fps = 30</function>
      <function name="_init" enabled="1">---init
function _init()
end</function>
      <function name="_update" enabled="1">---update
function _update()
  update_player()
  for i, b in pairs(bullets_player) do update_bullet(b, bullets_player) end
  for i, b in pairs(bullets_enemies) do update_bullet(b, bullets_enemies) end
  foreach(enemies, update_enemy)
  
  if game_state == 0 then
    --main menu
    if btnp(5) then
      game_state = 1
      new_level(level)
    end
    
  elseif game_state &gt;= 1 then
    --game
    update_level()
    check_hit_bullets(0)
    check_hit_bullets(1)
  end
end

</function>
      <function name="_draw" enabled="1">---draw
function _draw()
  cls()
  map(map_x,map_y,0,0,16,16)
  draw_player()
  if game_state == 0 then
    --main
    if not btn(4) then
      rectfill(32, 32, 103, 48, 5)
      print('sea of ships', 33, 33, 7)
      print('by tymon &amp; ischa', 33, 41, 7)
      rectfill(32, 72, 64, 88, 5)
      print('move:', 33, 73, 7)
      print('arrows', 33, 81, 7)
      rectfill(72, 72, 104, 88, 5)
      print('shoot:', 73, 73, 7)
      print('x', 73, 81, 7)
    end
  elseif game_state == 1 then
    --game
  end
  draw_game_ui()
  foreach(bullets_player, draw_bullet)
  foreach(bullets_enemies, draw_bullet)
  foreach(enemies, draw_enemy)
end

function draw_game_ui()
  rectfill(0, 0, 128, 8, 0)
  print('lvl: '..level, 1, 2, 7)
  local s = '0000'
  if score &gt; 999 then s = score
  elseif score &gt; 99 then s = '0'..score
  elseif score &gt; 9 then s = '00'..score
  else s = '000'..score end
  print('score: '..s, 84, 2, 7)
  rectfill(0, 120, 128, 128, 0)
  if lives &gt; 0 then spr(3, 1, 120) end
  if lives &gt; 1 then spr(3, 9, 120) end
  if lives &gt; 2 then spr(3, 17, 120) end
  local bcount = 4 - table_length(bullets_player)
  if bcount &gt; 0 then spr(2, 120, 120) end
  if bcount &gt; 1 then spr(2, 112, 120) end
  if bcount &gt; 2 then spr(2, 104, 120) end
  if bcount &gt; 3 then spr(2, 96, 120) end
end</function>
      <function name="functions" enabled="1">---functions (mostly abc sorted)

--terrible code to check bullet collision
function check_hit_bullets(index)
  local todelete = {}
  if index == 0 then --check playerbullet hit enemy
    for i, b in pairs(bullets_player) do
      --foreach player bullet check foreach enemy if grid tile is same
      for j, e in pairs(enemies) do
        --if flr(b.x/8) == flr(e.x/8) and flr(b.y/8) == flr(e.y/8) then
        if distance(b.x,b.y,e.x,e.y) &lt; 8 then
          e.hp -= 1
          if e.hp &lt; 1 then
            --delete enemy and bullet cause collision
            local d = {b=b, e=e}
            add(todelete,d)
            score+=1
          else
            --enemy got hit, remove bullet
            remove_bullet(bullets_player, bullets_player[b.table_index])
            break
          end
        end
      end
    end
    for i, d in pairs(todelete) do
      --del(bullets_player, bullets_player[d.b.table_index])
      --del(enemies, enemies[d.e.table_index])
      remove_bullet(bullets_player, bullets_player[d.b.table_index])
      remove_enemy(enemies, enemies[d.e.table_index])
    end
  elseif index == 1 then --check enemybullet hit player
    for i, b in pairs(bullets_enemies) do
      if distance(b.x,b.y,p1x,p1y) &lt; 8 then
        -- player hit reset lvl
        lives -= 1
        new_level(level)
      end
    end
  end
end

--table, xpos, ypos, xdir, ydir, live timer
function create_bullet(x, y, angle, alivet, speed, table)
  local b = {
  x = x,
  y = y,
  dx = x - x + cos(angle) * speed,
  dy = y - y + sin(angle) * speed,
  alive = alivet,
  table_index = table_length(bullets) + 1
  }
  b.x += b.dx * 2
  b.y += b.dy * 2
  add(table, b)
  sfx(0)
end

--xpos,ypos,dirx,diry,lengthroute,diffeculty
function create_enemy(x,y,dx,dy,length,diff)
  local spra = {128,129,130,131}
  local shoot_time = 2 * fps
  local hp = 1
  local spd = 1
  local attack_distance = 40
  local bullet_speed = 1.5
  if diff == 0 then
    spra = {128,129,130,131}
    shoot_time = 2 * fps
    hp = 1
    spd = 1
    attack_distance = 6 * 8
    bullet_speed = 1.5
  elseif diff == 1 then
    spra = {144,145,146,147}
    shoot_time = 1.9 * fps
    hp = 2
    spd = 1
    attack_distance = 7 * 8
    bullet_speed = 1.75
  elseif diff == 2 then
    spra = {160,161,162,163}
    shoot_time = 1.8 * fps
    hp = 2
    spd = 1.25
    attack_distance = 9 * 8
    bullet_speed = 1.4
  elseif diff == 3 then
    spra = {176,177,178,179}
    shoot_time = 1 * fps
    hp = 1
    spd = 3
    attack_distance = 4 * 8
    bullet_speed = 3
  end
  
  local e = {
  x = x,
  y = y,
  x1 = x,
  y1 = y,
  x2 = x + (dx * length),
  y2 = y + (dy * length),
  dx = dx * spd,
  dy = dy * spd,
  diff = diff,
  shoot_time = shoot_time,
  shoot_timer = shoot_time,
  sprite_index = spra[1],
  spra = spra,
  hp = hp,
  spd = spd,
  attack_distance = attack_distance,
  bullet_speed = bullet_speed,
  table_index = table_length(enemies) + 1
  }
  add(enemies, e)
end

-- gives distance between 2 points
function distance(x1,y1,x2,y2)
  local a = x2 - x1
  local b = y2 - y1
  return sqrt(a^2+b^2)
end

function draw_bullet(b)
  spr(2, b.x, b.y)
end

function draw_enemy(e)
  if e.dx &gt; 0 then e.sprite_index = e.spra[4]
  elseif e.dx &lt; 0 then e.sprite_index = e.spra[3]
  elseif e.dy &gt; 0 then e.sprite_index = e.spra[2]
  elseif e.dy &lt; 0 then e.sprite_index = e.spra[1] end
  
  spr(e.sprite_index, e.x, e.y)
end

--table to remove it from, bullet
function remove_bullet(table, b)
  del(table, table[b.table_index])
  for i, x in pairs(table) do
    x.table_index = i
  end
end

--table to remove it from, enemy
function remove_enemy(table, e)
  del(table, table[e.table_index])
  for i, x in pairs(table) do
    x.table_index = i
  end
end

function table_length(t)
  local count = 0
  for _ in pairs(t) do count = count + 1 end
  return count
end

function update_bullet(b, table)
  --bounce x
  if not solid_area(b.x + b.dx, b.y, 8, 8, 1) then
    b.x += b.dx
  else
    b.dx *= -1
    sfx(1)
  end
  --bounce y
  if not solid_area(b.x, b.y + b.dy, 8, 8, 1) then
    b.y += b.dy
  else
    b.dy *= -1
    sfx(1)
  end
  --remove bullet
  b.alive -= 1
  if b.alive &lt;= 0 then
    remove_bullet(table, b)
  end
  return b
end

function update_enemy(e)
  --check line dir
  if e.dx &gt; 0 or e.dx &lt; 0 then
    --x axis
    if e.dx &lt; 0 and e.x &lt; e.x1 then
     e.dx = e.spd
    elseif e.dx &gt; 0 and e.x &gt; e.x2 then
      e.dx = -e.spd
    end
  end
  if e.dy &gt; 0 or e.dy &lt; 0 then
    --y axis
    if e.dy &lt; 0 and e.y &lt; e.y1 then
      e.dy = e.spd
      elseif e.dy &gt; 0 and e.y &gt; e.y2 then
      e.dy = -e.spd
    end
  end
  --updatepos
  e.x += e.dx
  e.y += e.dy
  --shooting
  if e.shoot_timer &gt; 0 then
    e.shoot_timer -= 1
  else
    if distance(p1x,p1y,e.x,e.y) &lt;= e.attack_distance then
      local angle = atan2(p1x - e.x, p1y - e.y)
      create_bullet(e.x, e.y, angle, 30 * 4, e.bullet_speed, bullets_enemies)
      e.shoot_timer = e.shoot_time
    end
  end
end

--- other functions

--collision detection, spd cannot be higer than 1!
--xpos,ypos,width (8pixels = 7),height,flag index
function hit(x,y,w,h,f)
  collide=false
  for i=x,x+w,w do
    if fget(mget(i/8+map_x,y/8+map_y))==f or
    fget(mget(i/8+map_x,(y+h)/8+map_y))==f
      then collide=true
    end
  end
  return collide
end

function solid(x, y)
 return fget(mget(x/8+map_x, y/8+map_y)) == 1
end

function solid_area(x,y,w,h,d)
  x = x + (w / 2)
  y = y + (h / 2)
  return 
  solid(x-d,y-d) or
  solid(x+d,y-d) or
  solid(x-d,y+d) or
  solid(x+d,y+d)
end

-- sprite rotation by @fsouchu
-- rotate a sprite
-- col 0 is transparent
-- sx,sy - sprite sheet coords
-- x,y - screen coords
-- a - angle
-- w - width in tiles
function rspr(sx,sy,x,y,a,w)
    local ca,sa=cos(a),sin(a)
    local srcx,srcy
    local ddx0,ddy0=ca,sa
    local mask=shl(0xfff8,(w-1))
    w*=4
    ca*=w-0.5
    sa*=w-0.5
    local dx0,dy0=sa-ca+w,-ca-sa+w
    w=2*w-1
    for ix=0,w do
        srcx,srcy=dx0,dy0
        for iy=0,w do
            if band(bor(srcx,srcy),mask)==0 then
                local c=sget(sx+srcx,sy+srcy)
                                -- set transparent color here
                if (c!=0) pset(x+ix,y+iy,c)
            end
            srcx-=ddy0
            srcy+=ddx0
        end
        dx0+=ddx0
        dy0+=ddy0
    end
end

</function>
      <function name="player" enabled="1">---player, credit to elastiskalinjen for dir based movement
p1angle=0
p1anglespd = 0.02
p1speed=0.5
p1acc=0
p1x=16
p1y=24
p1dx=0
p1dy=0
p1_max_bullets = 4

function update_player()
  if lives &lt; 1 then
    game_over()
  end
  
  --movement
  if btn(0) then
    p1angle+=p1anglespd
  end
  if btn(1) then
    p1angle-=p1anglespd
  end
  -- p1angle=p1angle%360
  if btn(2) then
    p1acc += p1speed
  end
  if btn(3) then
    p1acc -= p1speed
  end
  --move in angle dir
  local dx = cos(p1angle) * p1acc
  local dy = sin(p1angle) * p1acc
  -- collision check
  if hit(p1x+dx,p1y,7,7,1) or hit(p1x+dx,p1y,7,7,2) then
    dx=0
  end
  if hit(p1x,p1y+dy,7,7,1) or hit(p1x,p1y+dy,7,7,2) then
    dy=0
  end
  p1x+=dx
  p1y+=dy
  p1acc*=0.6
 
  --shooting
  if btnp(5) and level &gt; 0 and table_length(bullets_player)+1 &lt;= p1_max_bullets then
    create_bullet(p1x, p1y, p1angle, 30 * 4, 1.5, bullets_player)
  end
end

function draw_player()
--  spr(1, xpos, ypos)
  rspr(8,0, p1x, p1y,-p1angle, 1, 1)
  color(7)
--print(p1angle)
--print(p1x)
--print(p1y)  
end</function>
      <function name="updatelevel" enabled="1">---update level
function new_level(index)
  level = index
  --reset
  has_started_level = false
  enemies = {}
  bullets_player = {}
  bullets_enemies = {}
  p1angle = 0
end

function update_level()
  -- level init
  if not has_started_level then
    has_started_level = true
    if(level == 1) then
      map_x=16
      map_y=0
      p1x = 24
      p1y = 80
      create_enemy(96, 48, 0, 1, 40, 0)
    elseif(level == 2) then
      map_x=32
      map_y=0
      p1x=24
      p1y=80
      create_enemy(88, 48, 0, 1, 40, 0)
      create_enemy(106, 28, 0, 1, 60, 0)
    elseif(level == 3) then
      map_x=48
      map_y=0
      p1x=24
      p1y=80
      --x,y,dx,dy,length,difficulty
      create_enemy(16, 16, 1, 0, 40, 0)
      create_enemy(24, 24, 1, 0, 30, 0)
      create_enemy(88, 48, 0, 1, 40, 0)
      create_enemy(96, 28, 0, 1, 60, 1)
    elseif(level == 4) then
      map_x=64
      map_y=0
      p1x=24
      p1y=96
      create_enemy(20, 24, 1, 0, 24, 1)
      create_enemy(80, 24, 1, 0, 24, 1)
      create_enemy(32, 48, 1, 0, 40, 1)
      create_enemy(80, 96, 1, 0, 24, 2)
    elseif(level == 5) then
      map_x=80
      map_y=0
      p1x=24
      p1y=96
      create_enemy(60, 24, 1, 0, 40, 1)
      create_enemy(112, 16, 0, 1, 48, 2)
      create_enemy(40, 80, 1, 0, 64, 2)
    elseif(level == 6) then
      map_x=96
      map_y=0
      p1x=24
      p1y=96
      create_enemy(16, 24, 1, 0, 16, 1)
      create_enemy(48, 24, 1, 0, 24, 2)
      create_enemy(88, 24, 1, 0, 16, 2)
      create_enemy(16, 64, 1, 0, 16, 2)
      create_enemy(88, 64, 1, 0, 16, 3)
    elseif(level == 7) then
      map_x=112
      map_y=0
      p1x=24
      p1y=96
      create_enemy(16, 24, 1, 0, 16, 3)
      create_enemy(88, 24, 1, 0, 16, 3)
      create_enemy(88, 96, 1, 0, 16, 3)
    elseif(level == 8) then
      map_x=0
      map_y=16
      p1x=16
      p1y=16
    end
  end
  
  --level update
  --if all enemies dead next level
  if table_length(enemies) &lt; 1 and level &lt; 9 then
    score+=50
    new_level(level + 1)
  end
end

function game_over()
  --game reset
  map_x=0
  map_y=0
  level = 1
  game_state = 0
  lives = 3
  score = 0
  has_started_level = false
  bullets_player = {}
  bullets_enemies = {}
  enemies = {}
  p1angle=0
  --player
  p1anglespd = 0.02
  p1speed=0.5
  p1acc=0
  p1x=16
  p1y=24
  p1dx=0
  p1dy=0
end  
  </function>
    </entity>
  </entities>
</project>